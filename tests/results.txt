=== C# Lexer Started ===
KEYWORD: class
IDENTIFIER: Program
LBRACE: {
KEYWORD: static
TYPE: void
IDENTIFIER: Main
LPAREN: (
RPAREN: )
LBRACE: {
TYPE: int
LBRACKET: [
RBRACKET: ]
IDENTIFIER: array
OPERATOR: =
KEYWORD: new
TYPE: int
LBRACKET: [
INTEGER_LITERAL: 10 -> 10
RBRACKET: ]
SEMICOLON: ;
TYPE: int
LBRACKET: [
COMMA: ,
RBRACKET: ]
IDENTIFIER: matrix
OPERATOR: =
KEYWORD: new
TYPE: int
LBRACKET: [
INTEGER_LITERAL: 5 -> 5
COMMA: ,
INTEGER_LITERAL: 5 -> 5
RBRACKET: ]
SEMICOLON: ;
KEYWORD: if
LPAREN: (
IDENTIFIER: array
LBRACKET: [
INTEGER_LITERAL: 0 -> 0
RBRACKET: ]
OPERATOR: ==
INTEGER_LITERAL: 0 -> 0
RPAREN: )
LBRACE: {
CONSOLE_METHOD: Console.WriteLine
LPAREN: (
STRING_LITERAL: "First element is zero"
RPAREN: )
SEMICOLON: ;
RBRACE: }
KEYWORD: for
LPAREN: (
TYPE: int
IDENTIFIER: i
OPERATOR: =
INTEGER_LITERAL: 0 -> 0
SEMICOLON: ;
IDENTIFIER: i
OPERATOR: <
INTEGER_LITERAL: 10 -> 10
SEMICOLON: ;
IDENTIFIER: i
OPERATOR: +
OPERATOR: +
RPAREN: )
LBRACE: {
IDENTIFIER: array
LBRACKET: [
IDENTIFIER: i
RBRACKET: ]
OPERATOR: =
IDENTIFIER: i
OPERATOR: *
INTEGER_LITERAL: 2 -> 2
SEMICOLON: ;
RBRACE: }
KEYWORD: while
LPAREN: (
BOOL_LITERAL_TRUE
RPAREN: )
LBRACE: {
TYPE: string
IDENTIFIER: input
OPERATOR: =
CONSOLE_METHOD: Console.ReadLine
LPAREN: (
RPAREN: )
SEMICOLON: ;
KEYWORD: if
LPAREN: (
IDENTIFIER: input
OPERATOR: ==
STRING_LITERAL: "exit"
RPAREN: )
KEYWORD: break
SEMICOLON: ;
RBRACE: }
RBRACE: }
RBRACE: }
=== C# Lexer Finished ===
